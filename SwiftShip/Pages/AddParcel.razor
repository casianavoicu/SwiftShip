@page "/updateparcel"
@using DevExpress.Blazor;
@using SwiftShip.BusinessLogic;
@using SwiftShip.BusinessLogic.Models;
@using System.ComponentModel.DataAnnotations;
@inject IParcelBusinessLogic _parcelBusinessLogic
<PageTitle>Add Parcel</PageTitle>

<DxLoadingPanel @bind-Visible="PanelVisible"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Fetching Data..."
               >
<DxDataGrid @ref="grid"
            Data="@DataSource"
            RowInsertingAsync="@OnRowInsertingAsync">
    <HeaderTemplate>
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            <DxToolbarItem Text="New" BeginGroup="true" Click="@OnAddNewClick" IconCssClass="grid-toolbar-edit" />
        </DxToolbar>
    </HeaderTemplate>
    <Columns>
        <DxDataGridColumn Field="Customer.FirstName" Caption="First Name"/>
        <DxDataGridColumn Field="Customer.LastName" Caption="Last Name" />
        <DxDataGridColumn Field="Customer.EmailAddress" Caption="Email Address" />
        <DxDataGridColumn Field="@nameof(ParcelModel.Identifier)" EditorVisible="false" />
        <DxDataGridColumn Field="@nameof(ParcelModel.StageType)" EditorVisible="false" />
    </Columns>

</DxDataGrid>
</DxLoadingPanel>


@code {
    readonly TaskCompletionSource<ParcelModel> firstEmployeeTcs = new(TaskCreationOptions.RunContinuationsAsynchronously);
    IEnumerable<ParcelModel> DataSource { get; set; }
    DxDataGrid<ParcelModel> grid { get; set; }
    bool Enabled = true;
    bool ShowFilterRow = false;
    bool PanelVisible { get; set; }
    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        DataSource = await _parcelBusinessLogic.GetAllAsync();
        PanelVisible = false;
    }

    async Task OnCancelButtonClick()
    {
        await grid.CancelRowEdit();
    }

    async Task OnRowInsertingAsync(IDictionary<string, object> newValues)
    {
        var parcel = new ParcelModel
        {
            Customer = new CustomerModel
            {
                    EmailAddress = newValues["Customer.EmailAddress"].ToString(),
                    FirstName = newValues["Customer.FirstName"].ToString(),
                    LastName = newValues["Customer.LastName"].ToString()
            },
        };
        await _parcelBusinessLogic.AddAsync(parcel);
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        DataSource = await _parcelBusinessLogic.GetAllAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        firstEmployeeTcs.TrySetCanceled();
    }

    async Task OnAddNewClick()
    {
        await grid.StartRowEdit(null);
        if (!Enabled)
            ChangeToolbarEnabled(true);
    }

    void ChangeToolbarEnabled(bool enabled)
    {
        Enabled = enabled;
        StateHasChanged();
    }
}