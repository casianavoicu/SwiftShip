@page "/parceldetails"

@implements IDisposable
@using SwiftShip.BusinessLogic;
@using SwiftShip.BusinessLogic.BusinessLogic;
@using SwiftShip.BusinessLogic.Models;
@using SwiftShip.BusinessLogic.Utils;
@using SwiftShip.Database.Enums;
@inject IParcelBusinessLogic _parcelBusinessLogic
@inject IStageHandler _stageBusinessLogic

<DxGrid @ref="Grid"
        Data="DataSource"
        PageSize="12"
        KeyFieldName="Id"
        ValidationEnabled="true"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        PopupEditFormCssClass="pw-800"
        EditMode="@CurrentEditMode">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Customer.FirstName" Caption="First Name" />
        <DxGridDataColumn FieldName="Customer.LastName" Caption="Last Name" />
        <DxGridDataColumn FieldName="Customer.EmailAddress" Caption="Email Address" />
        <DxGridDataColumn FieldName="@nameof(ParcelModel.Identifier)" />
        <DxGridDataColumn FieldName="@nameof(ParcelModel.Address)" ReadOnly=IsAddressInEditMode />
        <DxGridDataColumn FieldName="@nameof(ParcelModel.RegisteredDate)" />
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var currentModel = (ParcelModel)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="First Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("Customer.FirstName")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Last Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("Customer.LastName")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="EmailAddress:" ColSpanMd="6">
                @EditFormContext.GetEditor("Customer.EmailAddress")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Address:" ColSpanMd="6">
                @EditFormContext.GetEditor("Address")
          </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    IEnumerable<ParcelModel> DataSource { get; set; } = new List<ParcelModel>();
    IGrid? Grid { get; set; }
    GridEditMode CurrentEditMode = GridEditMode.EditForm;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);
    public bool IsAddressInEditMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        DataSource = await _parcelBusinessLogic.GetAllAsync();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var parcel = (ParcelModel)e.EditModel;
        if (e.IsNew)
            await _parcelBusinessLogic.AddAsync(parcel);
        else
            await _parcelBusinessLogic.UpdateAsync(parcel);
        await UpdateDataAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var model = (ParcelModel)e.DataItem;

        await _parcelBusinessLogic.RemoveAsync(model.Id);
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        DataSource = await _parcelBusinessLogic.GetAllAsync();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {

        if (e.IsNew)
        {
            var newEmployee = (ParcelModel)e.EditModel;
            newEmployee.StageType = StageType.Warehouse;
            newEmployee.Customer = new CustomerModel();
            IsAddressInEditMode = false;
        }
        else
        {
            IsAddressInEditMode = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            DataLoadedTcs.TrySetResult(true);
    }
}