@page "/parceltracking"

@using SwiftShip.BusinessLogic.Models;
@using SwiftShip.BusinessLogic;
@using SwiftShip.Database.Enums;
@inject IParcelStageHistoryBusinessLogic _parcelStageBusinessLogic
@inject IStageHandler _stageBusinessLogic

<DxGrid @ref="Grid"
        Data="DataSource"
        PageSize="12"
        KeyFieldName="Id"
        ValidationEnabled="true"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving"
        PopupEditFormCssClass="pw-800"
        SelectionMode="GridSelectionMode.Single"
        EditMode="@CurrentEditMode">
    <Columns>
        <DxGridCommandColumn Width="160px" NewButtonVisible="false" DeleteButtonVisible="false" />
        <DxGridDataColumn FieldName="@nameof(ParcelStageModel.Identifier)" />
        <DxGridDataColumn FieldName="@nameof(ParcelStageModel.Stage)" />
        <DxGridDataColumn FieldName="@nameof(ParcelStageModel.Address)" ReadOnly=IsAddressInEditMode />
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var currentModel = (ParcelStageModel)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="Address:" ColSpanMd="6" >
                @EditFormContext.GetEditor("Address")
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="State" ColSpanMd="6">
                <DxComboBox Data="CurrentStages" @bind-Value="currentModel.Stage" Enabled="@isDropDownVisible" 
                SelectedItemChanged="@((StageType stage) => 
                    {
                    currentModel.Address = ""; 
                    OnItemChanged(stage);
                    })">
                </DxComboBox>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    IEnumerable<ParcelStageModel> DataSource { get; set; }
    IGrid? Grid { get; set; }
    GridEditMode CurrentEditMode = GridEditMode.EditForm;
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);
    private StageType SelectedStage;
    private List<StageType> CurrentStages = new List<StageType>();
    private bool isDropDownVisible = true;
    public bool IsAddressInEditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataSource = await _parcelStageBusinessLogic.GetAllAsync();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            DataLoadedTcs.TrySetResult(true);
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        var model = (ParcelStageModel)e.EditModel;

        isDropDownVisible = true;
        IsAddressInEditMode = true;
        GetFilteredStages(((ParcelStageModel)e.EditModel).Stage);

    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var parcel = (ParcelStageModel)e.EditModel;
        await _parcelStageBusinessLogic.AddAsync(parcel);
        await UpdateDataAsync();
    }


    private void GetFilteredStages(StageType selectedStageType)
    {
        CurrentStages = _stageBusinessLogic.GetStageOptions(selectedStageType);
    }

    private void OnItemChanged(StageType newSelection)
    {
        isDropDownVisible = false;
        IsAddressInEditMode = false;
    }

    async Task UpdateDataAsync()
    {
        DataSource = await _parcelStageBusinessLogic.GetAllAsync();
    }
   
}
